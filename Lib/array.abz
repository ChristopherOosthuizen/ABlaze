
void merge(var: array, int left, int middle, int right){
    int lengthLeft = middle-left+1; 
    int lengthRight = right-middle;
    var: subArrayLeft = int[];
    var: subArrayRight = int[];
    for(int i=0; i<lengthLeft; i++)
        append(subArrayLeft,array[left+i]);

    for(int i=0; i<lengthRight; i++)
        append(subArrayRight,array[middle+1+i]);

    int leftIndex =0;
    int rightIndex =0;

    int indexMerged = left;
    while((leftIndex< lengthLeft) && (rightIndex < lengthRight)){
        if(subArrayLeft[leftIndex] <= subArrayRight[rightIndex]){
            array[indexMerged] = subArrayLeft[leftIndex]; 
            leftIndex++;
        }else{
            array[indexMerged] = subArrayRight[rightIndex];
            rightIndex++;
        }
        indexMerged++;
    }
    while(leftIndex < lengthLeft){
        array[indexMerged] = subArrayLeft[leftIndex];
        leftIndex++;
        indexMerged++;
    }

    while(rightIndex < lengthRight){
        array[indexMerged] = subArrayRight[rightIndex];
        rightIndex++;
        indexMerged++;
    }
}

void mergeSort(var: array, int left,int right){
    if(left>=right){
        return;
    }
    int middle = left+(right-left)/2;
    mergeSort(array,left,middle);
    mergeSort(array,middle+1,right);
    merge(array,left,middle,right);

}

void sort(var: array){
    mergeSort(array,0, (len array)-1);
}

int binarySearcher(var array,int start, int end, var value){
    if(start >= end)
        return -1;

    int middle = start+(end-start)/2;
    if(array[middle] == value)
        return middle;
    if(array[middle] > value){
        return binarySearcher(array,start,middle-1,value);
    }
    return binarySearcher(array,middle+1,end,value);
}

int binarySearch(var array,var value){
    return binarySearcher(array,0,(len array)-1,value);
}
int indexOf(var array,var value){
    for(int i=0; i< len array; i++){
        if(value == array[i])
            return i;
    } 
    return -1;
}